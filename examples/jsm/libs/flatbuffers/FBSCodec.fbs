namespace FBSCodec;

struct Color {
    r:float;
    g:float;
    b:float;
}

struct Vector2 {
    x:float;
    y:float;
}

struct Vector3 {
    x:float;
    y:float;
}

struct Matrix4 {
    n11:float; n21:float; n31:float; n41:float;
    n12:float; n22:float; n32:float; n42:float;
    n13:float; n23:float; n33:float; n43:float;
    n14:float; n24:float; n34:float; n44:float;
}


table Int8Array {
    data:[int8];
}

table Uint8Array {
    data:[uint8];
    clamped:bool = false;
}

table Int16Array {
    data:[int16];
}

table Uint16Array {
    data:[uint16];
}

table Int32Array {
    data:[int32];
}

table Uint32Array {
    data:[uint32];
}

table Float32Array {
    data:[float32];
}

table Float64Array {
    data:[float64];
}


union TypedArray {
    Int8Array,
	Uint8Array,
	Int16Array,
	Uint16Array,
	Int32Array,
	Uint32Array,
	Float32Array,
	Float64Array
}


table BufferAttribute {
    array:TypedArray;
    itemSize:int = 3;
    normalized:bool = false;
}

table Attribute {
    name:string (key);
    attribute:BufferAttribute;
}

struct BufferGeometryGroup {
    start:uint;
    count:uint;
    materialIndex:uint;
}

table BufferGeometry {
    uuid:string;
    name:string;
    attributes:[Attribute];
    index:BufferAttribute;
    groups:[BufferGeometryGroup];
    userData:string;
}

table Unkown { uuid:string; json:string; }

// union Geometry { BufferGeometry, Unkown }

union Material { Unkown }

table Image {
    data:[ubyte];
    width:uint;
    height:uint;
    type:string;
}

table Texture {
    uuid:string;
    name:string;
    image:Image;
	offset:Vector2;
	center:Vector2;
    repeat:Vector2;
	rotation:float;
    wrapS:uint16;
    wrapT:uint16;
    mapping:uint16;
    format:uint16;
    type:uint16;
    encoding:uint16;
    magFilter:uint16;
    minFilter:uint16;
    anisotropy:float;
    flipY:bool = false;
    premultiplyAlpha:bool;
    unpackAlignment:uint8;
}


struct Fog {
    color:Color;
    near:float;
    far:float;
}

struct FogExp2 {
    color:Color;
    density:float;
}

union FogUni { Fog, FogExp2 }

union Background {Color, Texture}

union Object {
    Object3D,
    Mesh,
    Line,
    Points,
    Group,
    Scene,
    InstancedMesh
}

table Object3D {
    uuid:string;
    name:string;
    castShadow:bool = false;
    receiveShadow:bool = false;
    visible:bool = true;
    frustumCulled:bool = true;
    renderOrder:int = 0;
    layers: uint = 0;
    matrix:Matrix4;
    matrixAutoUpdate:bool = true;
    children:[Object];
    userData:string;
}

table Mesh {
    __base__:Object3D;
    geometry:BufferGeometry;
    material:Material;
}

table Line {
    __base__:Object3D;
    geometry:BufferGeometry;
    material:Material;
}

table Points {
    __base__:Object3D;
    geometry:BufferGeometry;
    material:Material;
}


table Group {
    __base__:Object3D;
}

table Scene {
    __base__:Object3D;
    background:Background;
    environment:Texture;
    fog:FogUni;
}

table InstancedMesh {
    __base__:Object3D;
    count:int;
    instanceMatrix:BufferAttribute;
}

table Metadata {
    version:float = 1.0;
    generator:string;
}

table Root {
    metadata:Metadata;
    object:Object;
}


root_type Root;
